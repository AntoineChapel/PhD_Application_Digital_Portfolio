{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Math+Econ+Code Prerequisites 0: Introduction to Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Basics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is a comment. To display something in Python: print\n",
    "\n",
    "print(\"Welcome to M+E+C June session\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#variable declaration is easy in Python:\n",
    "\n",
    "name = \"Dominique\"\n",
    "age = 26\n",
    "\n",
    "\n",
    "#Easy way:\n",
    "print(name, \"is\", age, \"years old\")\n",
    "\n",
    "#More modern way:\n",
    "print(f'In {5} years, {name} will be {age+5} years old')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As you see, Python is quite forgiving with type mismatch. Be careful however:\n",
    "number_string = \"12\" #this is a string\n",
    "number_int = 12 #this is an integer\n",
    "\n",
    "\n",
    "print(2*number_string, 2*number_int)\n",
    "#The result is clearly not the same"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Python is also a calculator\n",
    "\n",
    "print(5+10*5)\n",
    "print((64**(0.5))/4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Types and slicing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Python uses 0-indexing: in a list of objects, the first object has index 0. This will be clearer later.\n",
    "#Let us review the most common variable types that can be used in Python and their mutability:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### String variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "song_name = \"Hello, goodbye\"\n",
    "type(song_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Slicing: note the 0-indexing of Python. To get the first element, you use the index 0.\n",
    "print(song_name[0])\n",
    "\n",
    "#Trying to change a letter in a string will return an error:\n",
    "song_name[0] = \"Y\"\n",
    "\n",
    "#Errors are quite explicit in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#You may however select a part of a string and use it in the construction of a new variable:\n",
    "new_song_name = song_name[0:4] + \" Bells\"\n",
    "print(new_song_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercise 1: try to print \"Hello darkness my old friend\" using song_name:\n",
    "beautiful_song_name = song_name[] + \"\"\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print(beautiful_song_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Integers and Floats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Those are quite straightforward:\n",
    "number_int = 5\n",
    "number_float = 5.0\n",
    "\n",
    "type(number_int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type(number_float)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#A python list is an ordered set of objects. It can contain any other type of variable, including nested lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_firstname = [\"Alfred\", \"Anna\", \"Cl√©ment\", \"Loan\", \"Antoine\"]\n",
    "type(list_firstname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To slice \"from the end\", you may use negative indexes.\n",
    "\n",
    "list_firstname[-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Lists are mutable objects: you can change an element from the list:\n",
    "list_firstname[-1] = \"Jean-Pierre\"\n",
    "print(list_firstname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#You may add an element to a list by putting it at the very end, using append:\n",
    "list_firstname.append(\"Jean-Michel\")\n",
    "print(list_firstname)\n",
    "\n",
    "\n",
    "#Or insert it at some precise index:\n",
    "list_firstname.insert(2, \"Louise-Marie\")\n",
    "print(list_firstname)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tuples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A tuple is an other type of ordered set of objects\n",
    "\n",
    "tuple_name = (\"Galichon\", \"Vlasova\", \"Montes\", \"Tricot\", \"Chapel\")\n",
    "type(tuple_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tuples differ from lists because they are immutable:\n",
    "\n",
    "try:\n",
    "    tuple_name[-1] = \"Pierre\"\n",
    "except:\n",
    "    print(\"Error: Tuples are not mutable\")\n",
    "    \n",
    "#The syntax shown above is a form of basic error management"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dictionaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dictionary is an unordered set of objects with some useful properties:\n",
    "\n",
    "dict_fruit = {\"apple\": 27, \"pear\": 12}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_fruit.items()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_fruit.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_fruit.values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_fruit[\"apple\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_harvest  = {\"apple\": 12, \"pear\": 1}\n",
    "\n",
    "#Let's update the values in our dictionary:\n",
    "dict_fruit[\"apple\"] = dict_fruit[\"apple\"] + new_harvest[\"apple\"]\n",
    "\n",
    "\n",
    "#Exercise 2: Do the same for pears, but use the following syntax:\n",
    "#To update a variable, instead of x = x + 1, you may use x += 1\n",
    "\n",
    "dict_fruit[\"pear\"]\n",
    "\n",
    "\n",
    "print(dict_fruit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loopings: if, for, while"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# One last type that will be useful here is the Boolean: basically, a Boolean can be True, False.\n",
    "\n",
    "type(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Some boolean operations:\n",
    "print(f'Is 4 equal to 5 ? {4 == 5}')\n",
    "\n",
    "print(f'Is 4 lower or equal to 5 ? {4 <= 5}')\n",
    "\n",
    "print(f'Is 4 strictly higher than 5 ? {4 > 5}')\n",
    "\n",
    "print(f'Is 4 different from 5 ? {4 != 5}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(True and False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(True or False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# If is a key word by which, if the condition stated afterwards is true, the indented code will execute. For example:\n",
    "\n",
    "grade = 9.5\n",
    "\n",
    "if grade >= 10:\n",
    "    print('You passed !')\n",
    "    \n",
    "#Nothing happens because the condition x >= 10 is not met."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grade1 = 9.5\n",
    "grade2 = 12.001\n",
    "\n",
    "if grade1 >= 10 or grade2 > 12:\n",
    "    print('You passed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#More complex conditions:\n",
    "average = 15\n",
    "\n",
    "if average < 10:\n",
    "    print(\"Better luck next time !\")\n",
    "elif average >= 10 and average < 14:\n",
    "    print(\"You passed.\")\n",
    "elif average >= 14 and average < 18:\n",
    "    print(\"You passed with a good grade\")\n",
    "else:\n",
    "    print(\"You passed with an excellent grade !\")\n",
    "\n",
    "    \n",
    "#As you can see, elif checks alternative conditions, and else acts as a catch-all if none of the previous conditions were met."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for loops:\n",
    "listname = [\"Jos√©phine\", \"Luc\", \"Kevin\", \"Leandre\"]\n",
    "\n",
    "for name in listname:\n",
    "    print(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grade_list = [8, 15, 19, 0, 12]\n",
    "\n",
    "for grade in grade_list:\n",
    "    if grade < 10:\n",
    "        print(\"Better luck next time !\")\n",
    "    elif grade >= 10 and grade < 14:\n",
    "        print(\"You passed.\")\n",
    "    elif grade >= 14 and grade < 18:\n",
    "        print(\"You passed with a good grade\")\n",
    "    else:\n",
    "        print(\"You passed with an excellent grade !\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#A useful tool with \"for\": range\n",
    "index_list = []\n",
    "\n",
    "I = 10\n",
    "for i in range(I):\n",
    "    index_list.append(i)\n",
    "\n",
    "print(index_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#while loops:\n",
    "index_list_bis = []\n",
    "\n",
    "i_max = 10\n",
    "i = 0\n",
    "\n",
    "while i < i_max: #while: =as long as condition\n",
    "    index_list_bis.append(i)\n",
    "    i += 1 # increments i by 1: same thing as i = i + 1\n",
    "\n",
    "print(index_list_bis)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#You can create functions with the keyword \"def\"\n",
    "def return_square(x):\n",
    "    return x**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5\n",
    "x_squared = return_square(x)\n",
    "print(x_squared)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def attribute_comment(grade_list):\n",
    "    comment_list = []\n",
    "    \n",
    "    for grade in grade_list:\n",
    "        if grade < 10:\n",
    "            comment_list.append(\"Better luck next time !\")\n",
    "        elif grade >= 10 and grade < 14:\n",
    "            comment_list.append(\"You passed.\")\n",
    "        elif grade >= 14 and grade < 18:\n",
    "            comment_list.append(\"You passed with a good grade\")\n",
    "        else:\n",
    "            comment_list.append(\"You passed with an excellent grade !\")\n",
    "            \n",
    "    return comment_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grade_list_bis = grade_list.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "attribute_comment(grade_list_bis)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Classes are an object-oriented-programming tool. Let us create a simple one, where\n",
    "# a teacher wants to automate his comment attribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GradeBook: #Object gradebook\n",
    "    \n",
    "    def __init__(self, courselist, gradelist): # we attach some variables to this object\n",
    "        self.courselist = courselist\n",
    "        self.gradelist = gradelist\n",
    "        self.commentlist = []\n",
    "    \n",
    "    def attribute_comments(self):\n",
    "        for grade in self.gradelist:\n",
    "            if grade < 10:\n",
    "                self.commentlist.append(\"Better luck next time !\")\n",
    "            elif grade >= 10 and grade < 14:\n",
    "                self.commentlist.append(\"You passed.\")\n",
    "            elif grade >= 14 and grade < 18:\n",
    "                self.commentlist.append(\"You passed with a good grade\")\n",
    "            else:\n",
    "                self.commentlist.append(\"You passed with an excellent grade !\")\n",
    "    def send_grades(self):\n",
    "        return list(zip(self.courselist, self.gradelist, self.commentlist))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Nathan_grades = GradeBook([\"Maths\", \"Stats\"], [15, 20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Nathan_grades.courselist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Nathan_grades.gradelist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Nathan_grades.commentlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Nathan_grades.attribute_comments()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Nathan_grades.send_grades()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NumPy\n",
    "Python has no built-in tool for handling matrices. To do so any much more, we will rely\n",
    "On an external library: Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix = np.array([[1, 2, 3],\n",
    "                   [4, 5, 6]])\n",
    "print(matrix)\n",
    "print(type(matrix))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Numpy arrays are mutable objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(matrix.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(matrix.shape[1]):\n",
    "    matrix[:, i] = matrix[:, i]*(10**i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix[0, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Matrix operations:\n",
    "\n",
    "matrix1 = np.array([[1, 2, 3],\n",
    "                    [4, 5, 6]])\n",
    "matrix2 = np.array([[6, 7, 9],\n",
    "                    [10, 11, 12]])\n",
    "print(matrix1)\n",
    "print(matrix2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Sum:\n",
    "matrix1 + matrix2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Elementwise product:\n",
    "matrix1 * matrix2\n",
    "#or\n",
    "np.multiply(matrix1, matrix2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dot product:\n",
    "matrix1 @ matrix2.T\n",
    "#or\n",
    "np.dot(matrix1, matrix2.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exercise 4:\n",
    "#You have 10 students, who take 5 courses each.\n",
    "\n",
    "grade_array = np.round(np.random.uniform(8, 20, size = (5, 10)), 2)\n",
    "print(grade_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fill in the code below so that it returns a numpy array containing the average\n",
    "# of every student, and a list of comments\n",
    "\n",
    "def grade_students(grade_array):\n",
    "    comment_list = []\n",
    "    avg_list = []\n",
    "    \n",
    "    for student_index in range(___.shape[1]):\n",
    "        student_grades = grade_array[:, ___]\n",
    "        student_avg = np.___(student_grades) #Look for the numpy function that takes the mean over a vector\n",
    "        ___.append(student_avg)\n",
    "        \n",
    "    for ___ in avg_list:\n",
    "        if ___ < 10:\n",
    "            comment_list.___(\"Insufficient\")\n",
    "        elif ___ >= 10 and ___ < 12:\n",
    "            comment_list.___(\"Pass\")\n",
    "        elif ___ >= 12 and ___ < 16:\n",
    "            comment_list.___(\"Good\")\n",
    "        else:\n",
    "            comment_list.___(\"Excellent\")\n",
    "            \n",
    "    return np.round(___, 2), comment_list #np.round(, n) rounds up the values to the nth decimal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test your function:\n",
    "\n",
    "grade_students(grade_array)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic Optimisation with Scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.optimize import minimize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    return (x[0]-1)**2 + (x[1]-1)**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "minimize(f, x0 = [0, 0])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
